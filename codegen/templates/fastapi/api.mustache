# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
# If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

# coding: utf-8

import structlog
import traceback
from http import HTTPStatus
from fastapi.responses import ORJSONResponse, JSONResponse
from fastapi.encoders import jsonable_encoder
from fastapi import (  # noqa: F401
    APIRouter,
    Body,
    Cookie,
    Depends,
    Form,
    Header,
    HTTPException,
    Path,
    Query,
    Request,
    Response,
    Security,
    status,
)

from {{packageName}}.impl.util import gzip
from {{modelPackage}}.extra_models import TokenModel  # noqa: F401
{{#imports}}
{{import}}
{{/imports}}
{{#securityImports.0}}from {{packageName}}.security_api import {{#securityImports}}get_token_{{.}}{{^-last}}, {{/-last}}{{/securityImports}}{{/securityImports.0}}
from {{packageName}}.impl.apis import {{classFilename}}_impl

router = APIRouter(route_class=gzip.GzipRoute)
logger = structlog.get_logger("flowkit_ui_backend.log")


{{#operations}}
{{#operation}}
@router.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(
    "{{path}}",
    responses={
        {{#responses}}
        {{code}}: {{=<% %>=}}{<%#dataType%>"model": <%dataType%>, "description": "<%message%>"<%/dataType%><%^dataType%>"description": "<%message%>"<%/dataType%>}<%={{ }}=%>,
        {{/responses}}
    },
    tags=[{{#tags}}"{{name}}"{{^-last}},{{/-last}}{{/tags}}],
    {{#summary}}
    summary="{{.}}",
    {{/summary}}
    {{#description}}
    description = "{{.}}",
    {{/description}}
    response_class=ORJSONResponse
)
async def {{operationId}}(
    {{#allParams}}
    {{>endpoint_argument_definition}},
    {{/allParams}}
    {{#hasAuthMethods}}
    {{#authMethods}}
    token_{{name}}: TokenModel = Security(
        get_token_{{name}}{{#isOAuth}}, scopes=[{{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}}]{{/isOAuth}}
    ),
    {{/authMethods}}
    {{/hasAuthMethods}}
    request: Request = None
) -> {{returnType}}{{^returnType}}None{{/returnType}}:
    {{#notes}}"""{{.}}"""{{/notes}}

    if not hasattr({{classFilename}}_impl, '{{operationId}}') or not callable(getattr({{classFilename}}_impl, '{{operationId}}')):
        raise NotImplementedError("The /{{operationId}} endpoint is not yet implemented")

    try:
        logger.debug("Starting request")
        impl_result = await {{classFilename}}_impl.{{operationId}}({{#allParams}}{{paramName}}, {{/allParams}}pool=request.app.state.pool{{#hasAuthMethods}}{{#authMethods}}, token_model=token_auth0{{/authMethods}}{{/hasAuthMethods}})
        logger.debug("Request ready")
        content = impl_result[0] if isinstance(impl_result, tuple) else impl_result
        if isinstance(impl_result, Response):
            return impl_result
        # default to status 200/204 but give the impl the option to define a different status code when returning content
        status_code = impl_result[1] if isinstance(impl_result, tuple) else None
        if content is not None:
            return ORJSONResponse(status_code=status_code if status_code is not None else HTTPStatus.OK, content=jsonable_encoder(content))
        else:
            return Response(status_code=status_code if status_code is not None else HTTPStatus.NO_CONTENT)

    # This is where we handle status codes via exceptions as raised by the impl methods
    except HTTPException as e:
        logger.debug("Request failed", code=e.status_code, content=e.detail, traceback=traceback.print_exception(type(e), e, e.__traceback__))
        return JSONResponse(status_code=e.status_code, content=e.detail)
    except Exception as e:
        logger.error(e)
        traceback.print_exception(type(e), e, e.__traceback__)
        return JSONResponse(status_code=HTTPStatus.INTERNAL_SERVER_ERROR, content=f"Something went wrong: {e}")
    
{{^-last}}


{{/-last}}
{{/operation}}
{{/operations}}
