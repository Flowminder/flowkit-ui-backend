# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
# If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

# coding: utf-8

from http import HTTPStatus
from fastapi import HTTPException
from fastapi.testclient import TestClient
from {{packageName}}.main import app
import pytest
{{#imports}}{{import}}  # noqa: F401
{{/imports}}

client = TestClient(app)

{{#operations}}
{{#operation}}

{{#vendorExtensions.x-skip-test}}
@pytest.mark.skip("{{reason}}")
{{/vendorExtensions.x-skip-test}}
@pytest.mark.asyncio
async def test_{{operationId}}_happy_case():
    """Test case for {{{operationId}}}

    {{{summary}}}
    """
    {{#bodyParam}}
    {{paramName}} = {{#isContainer}}[{{/isContainer}}{{{example}}}{{#isContainer}}]{{/isContainer}}
    {{/bodyParam}}
    {{#queryParams}}
    {{#-first}}params = [{{/-first}}("{{paramName}}", {{{example}}}){{^-last}}, {{/-last}}{{#-last}}]{{/-last}}{{/queryParams}}
    headers = {{=<% %>=}}{<%#headerParams%><%={{ }}=%>
        "{{paramName}}": {{{example}}},{{/headerParams}}{{#authMethods}}
        {{#isOAuth}}"Authorization": "Bearer special-key",{{/isOAuth}}{{#isApiKey}}"{{name}}": "special-key",{{/isApiKey}}{{#isBasicBasic}}"Authorization": "BasicZm9vOmJhcg==",{{/isBasicBasic}}{{#isBasicBearer}}"Authorization": "Bearer special-key",{{/isBasicBearer}}{{/authMethods}}
    }
    {{#formParams}}
    {{#-first}}
    data = {
    {{/-first}}
        "{{paramName}}": {{{example}}}{{^-last}},{{/-last}}
    {{#-last}}
    }
    {{/-last}}
    {{/formParams}}
    response = client.request(
        "{{httpMethod}}",
        "{{{path}}}"{{#pathParams}}{{#-first}}.format({{/-first}}{{baseName}}={{{example}}}{{^-last}}, {{/-last}}{{#-last}}){{/-last}}{{/pathParams}},
        headers=headers,{{#bodyParam}}
        json={{paramName}},{{/bodyParam}}{{#formParams}}{{#-first}}
        data=data,{{/-first}}{{/formParams}}{{#queryParams}}{{#-first}}
        params=params,{{/-first}}{{/queryParams}}
    )

    assert response.status_code >= 200 and response.status_code < 300


{{#vendorExtensions.x-skip-test}}
@pytest.mark.skip("{{reason}}")
{{/vendorExtensions.x-skip-test}}
@pytest.mark.asyncio
async def test_{{operationId}}_content(mocker):
    """Test case for {{{operationId}}} when there is no implementation

    {{{summary}}}
    """

    mocker.patch(
        "{{packageName}}.apis.{{classFilename}}.{{classFilename}}_impl.{{operationId}}",
        side_effect=['foo']
    )

    {{#bodyParam}}
    {{paramName}} = {{#isContainer}}[{{/isContainer}}{{{example}}}{{#isContainer}}]{{/isContainer}}
    {{/bodyParam}}
    {{#queryParams}}
    {{#-first}}params = [{{/-first}}("{{paramName}}", {{{example}}}){{^-last}}, {{/-last}}{{#-last}}]{{/-last}}{{/queryParams}}
    headers = {{=<% %>=}}{<%#headerParams%><%={{ }}=%>
        "{{paramName}}": {{{example}}},{{/headerParams}}{{#authMethods}}
        {{#isOAuth}}"Authorization": "Bearer special-key",{{/isOAuth}}{{#isApiKey}}"{{name}}": "special-key",{{/isApiKey}}{{#isBasicBasic}}"Authorization": "BasicZm9vOmJhcg==",{{/isBasicBasic}}{{#isBasicBearer}}"Authorization": "Bearer special-key",{{/isBasicBearer}}{{/authMethods}}
    }
    {{#formParams}}
    {{#-first}}
    data = {
    {{/-first}}
        "{{paramName}}": {{{example}}}{{^-last}},{{/-last}}
    {{#-last}}
    }
    {{/-last}}
    {{/formParams}}
    response = client.request(
        "{{httpMethod}}",
        "{{{path}}}"{{#pathParams}}{{#-first}}.format({{/-first}}{{baseName}}={{{example}}}{{^-last}}, {{/-last}}{{#-last}}){{/-last}}{{/pathParams}},
        headers=headers,{{#bodyParam}}
        json={{paramName}},{{/bodyParam}}{{#formParams}}{{#-first}}
        data=data,{{/-first}}{{/formParams}}{{#queryParams}}{{#-first}}
        params=params,{{/-first}}{{/queryParams}}
    )

    assert response.status_code == 200
    assert response.content == 'foo'


{{#vendorExtensions.x-skip-test}}
@pytest.mark.skip("{{reason}}")
{{/vendorExtensions.x-skip-test}}
@pytest.mark.asyncio
async def test_{{operationId}}_no_content(mocker):
    """Test case for {{{operationId}}} when there is no implementation

    {{{summary}}}
    """

    mocker.patch(
        "{{packageName}}.apis.{{classFilename}}.{{classFilename}}_impl.{{operationId}}",
        side_effect=[None]
    )

    {{#bodyParam}}
    {{paramName}} = {{#isContainer}}[{{/isContainer}}{{{example}}}{{#isContainer}}]{{/isContainer}}
    {{/bodyParam}}
    {{#queryParams}}
    {{#-first}}params = [{{/-first}}("{{paramName}}", {{{example}}}){{^-last}}, {{/-last}}{{#-last}}]{{/-last}}{{/queryParams}}
    headers = {{=<% %>=}}{<%#headerParams%><%={{ }}=%>
        "{{paramName}}": {{{example}}},{{/headerParams}}{{#authMethods}}
        {{#isOAuth}}"Authorization": "Bearer special-key",{{/isOAuth}}{{#isApiKey}}"{{name}}": "special-key",{{/isApiKey}}{{#isBasicBasic}}"Authorization": "BasicZm9vOmJhcg==",{{/isBasicBasic}}{{#isBasicBearer}}"Authorization": "Bearer special-key",{{/isBasicBearer}}{{/authMethods}}
    }
    {{#formParams}}
    {{#-first}}
    data = {
    {{/-first}}
        "{{paramName}}": {{{example}}}{{^-last}},{{/-last}}
    {{#-last}}
    }
    {{/-last}}
    {{/formParams}}
    response = client.request(
        "{{httpMethod}}",
        "{{{path}}}"{{#pathParams}}{{#-first}}.format({{/-first}}{{baseName}}={{{example}}}{{^-last}}, {{/-last}}{{#-last}}){{/-last}}{{/pathParams}},
        headers=headers,{{#bodyParam}}
        json={{paramName}},{{/bodyParam}}{{#formParams}}{{#-first}}
        data=data,{{/-first}}{{/formParams}}{{#queryParams}}{{#-first}}
        params=params,{{/-first}}{{/queryParams}}
    )

    assert response.status_code == 204
    assert response.content == None


{{#vendorExtensions.x-skip-test}}
@pytest.mark.skip("{{reason}}")
{{/vendorExtensions.x-skip-test}}
@pytest.mark.asyncio
async def test_{{operationId}}_no_impl(mocker):
    """Test case for {{{operationId}}} when there is no implementation

    {{{summary}}}
    """

    mocker.patch(
        "{{packageName}}.apis.{{classFilename}}.{{classFilename}}_impl",
        {{operationId}}=None,
    )

    {{#bodyParam}}
    {{paramName}} = {{#isContainer}}[{{/isContainer}}{{{example}}}{{#isContainer}}]{{/isContainer}}
    {{/bodyParam}}
    {{#queryParams}}
    {{#-first}}params = [{{/-first}}("{{paramName}}", {{{example}}}){{^-last}}, {{/-last}}{{#-last}}]{{/-last}}{{/queryParams}}
    headers = {{=<% %>=}}{<%#headerParams%><%={{ }}=%>
        "{{paramName}}": {{{example}}},{{/headerParams}}{{#authMethods}}
        {{#isOAuth}}"Authorization": "Bearer special-key",{{/isOAuth}}{{#isApiKey}}"{{name}}": "special-key",{{/isApiKey}}{{#isBasicBasic}}"Authorization": "BasicZm9vOmJhcg==",{{/isBasicBasic}}{{#isBasicBearer}}"Authorization": "Bearer special-key",{{/isBasicBearer}}{{/authMethods}}
    }
    {{#formParams}}
    {{#-first}}
    data = {
    {{/-first}}
        "{{paramName}}": {{{example}}}{{^-last}},{{/-last}}
    {{#-last}}
    }
    {{/-last}}
    {{/formParams}}
    response = client.request(
        "{{httpMethod}}",
        "{{{path}}}"{{#pathParams}}{{#-first}}.format({{/-first}}{{baseName}}={{{example}}}{{^-last}}, {{/-last}}{{#-last}}){{/-last}}{{/pathParams}},
        headers=headers,{{#bodyParam}}
        json={{paramName}},{{/bodyParam}}{{#formParams}}{{#-first}}
        data=data,{{/-first}}{{/formParams}}{{#queryParams}}{{#-first}}
        params=params,{{/-first}}{{/queryParams}}
    )

    assert response.status_code == 501


{{#vendorExtensions.x-skip-test}}
@pytest.mark.skip("{{reason}}")
{{/vendorExtensions.x-skip-test}}
@pytest.mark.asyncio
async def test_{{operationId}}_http_exception(mocker):
    """Test case for {{{operationId}}} when there is no implementation

    {{{summary}}}
    """

    mocker.patch(
        "{{packageName}}.apis.{{classFilename}}.{{classFilename}}_impl.{{operationId}}",
        side_effect=[HTTPException(HTTPStatus.IM_A_TEAPOT, detail='foo')]
    )

    {{#bodyParam}}
    {{paramName}} = {{#isContainer}}[{{/isContainer}}{{{example}}}{{#isContainer}}]{{/isContainer}}
    {{/bodyParam}}
    {{#queryParams}}
    {{#-first}}params = [{{/-first}}("{{paramName}}", {{{example}}}){{^-last}}, {{/-last}}{{#-last}}]{{/-last}}{{/queryParams}}
    headers = {{=<% %>=}}{<%#headerParams%><%={{ }}=%>
        "{{paramName}}": {{{example}}},{{/headerParams}}{{#authMethods}}
        {{#isOAuth}}"Authorization": "Bearer special-key",{{/isOAuth}}{{#isApiKey}}"{{name}}": "special-key",{{/isApiKey}}{{#isBasicBasic}}"Authorization": "BasicZm9vOmJhcg==",{{/isBasicBasic}}{{#isBasicBearer}}"Authorization": "Bearer special-key",{{/isBasicBearer}}{{/authMethods}}
    }
    {{#formParams}}
    {{#-first}}
    data = {
    {{/-first}}
        "{{paramName}}": {{{example}}}{{^-last}},{{/-last}}
    {{#-last}}
    }
    {{/-last}}
    {{/formParams}}
    response = client.request(
        "{{httpMethod}}",
        "{{{path}}}"{{#pathParams}}{{#-first}}.format({{/-first}}{{baseName}}={{{example}}}{{^-last}}, {{/-last}}{{#-last}}){{/-last}}{{/pathParams}},
        headers=headers,{{#bodyParam}}
        json={{paramName}},{{/bodyParam}}{{#formParams}}{{#-first}}
        data=data,{{/-first}}{{/formParams}}{{#queryParams}}{{#-first}}
        params=params,{{/-first}}{{/queryParams}}
    )

    assert response.status_code == 500
    assert response.content == 'foo'

{{/operation}}
{{/operations}}
