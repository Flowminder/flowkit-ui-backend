# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
# If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

# coding: utf-8

import os
import structlog
from typing import List, Optional
from auth0.v3.authentication.async_token_verifier import AsyncAsymmetricSignatureVerifier


from fastapi import Depends, Security  # noqa: F401
from fastapi.openapi.models import OAuthFlowImplicit, OAuthFlows  # noqa: F401
from fastapi.security import (  # noqa: F401
    HTTPAuthorizationCredentials,
    HTTPBasic,
    HTTPBasicCredentials,
    HTTPBearer,
    OAuth2,
    OAuth2AuthorizationCodeBearer,
    OAuth2PasswordBearer,
    SecurityScopes,
)
from fastapi.security.api_key import APIKeyCookie, APIKeyHeader, APIKeyQuery  # noqa: F401

from {{modelPackage}}.extra_models import TokenModel

logger = structlog.get_logger("flowkit_ui_backend.log")

{{#authMethods}}
{{#isOAuth}}
{{#isPassword}}
oauth2_password = OAuth2PasswordBearer(
    tokenUrl="{{tokenUrl}}",
    scopes={
{{#scopes}}
        "{{scope}}": "{{description}}",
{{/scopes}}
    }
)
{{/isPassword}}
{{#isCode}}
oauth2_code = OAuth2AuthorizationCodeBearer(
    authorizationUrl="{{authorizationUrl}}",
    tokenUrl="{{tokenUrl}}",
    refreshUrl="{{refreshUrl}}",
    scopes={
{{#scopes}}
        "{{scope}}": "{{description}}",
{{/scopes}}
    }
)
{{/isCode}}
{{#isImplicit}}
oauth2_implicit = OAuth2(
    flows=OAuthFlows(
        implicit=OAuthFlowImplicit(
            authorizationUrl="{{authorizationUrl}}",
            scopes={
{{#scopes}}
                "{{scope}}": "{{description}}",
{{/scopes}}
            }
        )
    )
)
{{/isImplicit}}

# TODO: ideally move this to the app startup
sv = AsyncAsymmetricSignatureVerifier(f"https://{os.getenv('AUTH0_DOMAIN')}/.well-known/jwks.json")


async def get_token_{{name}}(
    security_scopes: SecurityScopes, token: str = Depends(oauth2_{{#isPassword}}password{{/isPassword}}{{#isCode}}code{{/isCode}}{{#isImplicit}}implicit{{/isImplicit}})
) -> TokenModel:
    """
    Validate and decode token.

    :param token Token provided by Authorization header
    :type token: str
    :return: Decoded token information or None if token is invalid
    :rtype: TokenModel | None
    """

    logger.debug("Validate token", client_id=os.getenv('AUTH0_AUDIENCE'), domain=os.getenv('AUTH0_DOMAIN'))

    try:
        # TODO: this currently only works for ID tokens, not access tokens; see https://github.com/auth0/auth0-PHP/issues/422
        # eventually we should use AsyncTokenVerifier instead of AsyncAsymmetricSignatureVerifier
        # see https://github.com/auth0/auth0-python/tree/f15520b8390ee7ba131a2dc45b0f96591b96bd95#id-token-validation
        # tv = AsyncTokenVerifier(signature_verifier=sv, issuer=f"https://{os.getenv('AUTH0_DOMAIN')}/", audience=os.getenv('AUTH0_AUDIENCE'))
        # claims = await tv.verify(token)
        claims = await sv.verify_signature(token)
    except Exception as e:
        logger.error(e)
        raise PermissionError(f"Could not decode token")

    logger.debug("Checking claims", claims=claims)
    valid = validate_scope_{{name}}(security_scopes.scopes, claims)
    if not valid:
        raise PermissionError(f"Invalid token: Required permissions {security_scopes.scopes} not present")

    return TokenModel(sub=claims['sub'], permissions=claims['permissions'])


def validate_scope_{{name}}(
    required_scopes: SecurityScopes, claims: dict
) -> bool:
    """
    Validate required scopes are included in token scope

    :param required_scopes Required scope to access called API
    :type required_scopes: List[str]
    :param claims Token claims, including scopes
    :type claims: dict
    :return: True if access to called API is allowed
    :rtype: bool
    """

    token_scopes = claims['scope'].split(' ') # We want to check scope here, rather than permission
    valid = all(item in token_scopes for item in required_scopes)
    logger.debug(f"Validating scopes", valid=valid, required=required_scopes, received=token_scopes)

    return valid

{{/isOAuth}}
{{#isApiKey}}


def get_token_{{name}}(
    {{#isKeyInHeader}}token_api_key_header: str = Security(
        APIKeyHeader(name="{{keyParamName}}", auto_error=False)
    ),{{/isKeyInHeader}}{{#isKeyInCookie}}
    token_api_key_cookie: str = Security(
        APIKeyCookie(name="{{keyParamName}}", auto_error=False)
    ),{{/isKeyInCookie}}{{#isKeyInQuery}}
    token_api_key_query: str = Security(
        APIKeyQuery(name="{{keyParamName}}", auto_error=False)
    ),{{/isKeyInQuery}}
) -> TokenModel:
    """
    Check and retrieve authentication information from api_key.

    {{#isKeyInHeader}}:param token_api_key_header API key provided by Authorization[{{keyParamName}}] header{{/isKeyInHeader}}
    {{#isKeyInCookie}}:param token_api_key_cookie API key provided by Authorization[{{keyParamName}}] cookie{{/isKeyInCookie}}
    {{#isKeyInQuery}}:param token_api_key_query API key provided by [{{keyParamName}}] query{{/isKeyInQuery}}
    :type token_api_key_{{#isKeyInHeader}}header{{/isKeyInHeader}}{{#isKeyInCookie}}cookie{{/isKeyInCookie}}{{#isKeyInQuery}}query{{/isKeyInQuery}}: str
    :return: Information attached to provided api_key or None if api_key is invalid or does not allow access to called API
    :rtype: TokenModel | None
    """

    logger.debug("api key get_token_{{name}}")
    logger.debug(token_api_key_header)
    logger.debug(token_api_key_cookie)
    logger.debug(token_api_key_query)
    return TokenModel(sub=credentials.credentials, permissions=[])

{{/isApiKey}}
{{#isBasicBasic}}

basic_auth = HTTPBasic()


def get_token_{{name}}(
    credentials: HTTPBasicCredentials = Depends(basic_auth)
) -> TokenModel:
    """
    Check and retrieve authentication information from basic auth.

    :param credentials Credentials provided by Authorization header
    :type credentials: HTTPBasicCredentials
    :rtype: TokenModel | None
    """

    logger.debug("basic auth get_token_{{name}}")
    logger.debug(credentials)
    return TokenModel(sub=credentials.credentials, permissions=[])

{{/isBasicBasic}}
{{#isBasicBearer}}

bearer_auth = HTTPBearer()


def get_token_{{name}}(credentials: HTTPAuthorizationCredentials = Depends(bearer_auth)) -> TokenModel:
    """
    Check and retrieve authentication information from custom bearer token.

    :param credentials Credentials provided by Authorization header
    :type credentials: HTTPAuthorizationCredentials
    :return: Decoded token information or None if token is invalid
    :rtype: TokenModel | None
    """

    logger.debug("bearer auth get_token_{{name}}")
    logger.debug(credentials)
    return TokenModel(sub=credentials.credentials, permissions=[])
{{/isBasicBearer}}
{{/authMethods}}
